Fundamental APIs for auth are already given by Spring Security OAuth2
1. /login
2. /logout
3. /signup
4. /validate -> to validate the token from Resource Service to Auth Service
5. /register -> registering a new client [ basically the service which will rely on Auth Service for authentication ]

// Central AuthService

// user login -> customer login
// central AuthService [ OAuth ] all the micro-services will be client to this central service

// employees login
// SSO -> Single Sign On -> single way to sign in everyone
// LDAP based authentication
// Active Directories  -> only the admin user of the device can access




// -----------------------HW -> Explore how Github login from terminal works -----------------------------------------

In IntelliJ IDEA, the terminal integration allows you to leverage two main approaches for GitHub login:

1. Using Personal Access Token (PAT):


Generate a PAT: Create a PAT in your GitHub settings.

Configure IntelliJ Settings:

Go to File -> Settings (or Preferences on macOS) -> Version Control -> GitHub.
Select "Log In via Token" and enter your username and the generated PAT.
Using Git Commands: Once configured, you can use Git commands within the IntelliJ terminal without needing to re-enter credentials for each command. The IDE automatically uses the stored PAT for authentication.

2. Using OAuth Login:

This method avoids storing credentials directly in the IDE but leverages OAuth for secure authorization. Here's the process:

Configure IntelliJ Settings:

Go to File -> Settings (or Preferences on macOS) -> Version Control -> GitHub.
Select "Log In via GitHub".
A browser window will open, prompting you to log in to your GitHub account.
Authorization: Grant IntelliJ access to your GitHub account scopes (e.g., "repo" for basic Git operations).

Subsequent Logins: After the initial setup, subsequent interactions might not require a full login flow.  The IDE might handle token refresh internally depending on its configuration.





// ------------------- HW -> Explore how terminal talks to other services like Github....----------------------------------


The IntelliJ IDEA terminal interacts with other services like GitHub primarily through Git commands. Here's a breakdown of the communication process:

User Initiates Git Command: You execute a Git command within the IntelliJ terminal, such as git clone, git push, or git pull.

IntelliJ Processes Command: The IntelliJ Git integration intercepts the command and interprets it.

Authentication (if needed):

PAT-Based Authentication:
If you've configured a Personal Access Token (PAT) in the IDE settings, IntelliJ retrieves the stored username and PAT.
OAuth-Based Authentication:
If using OAuth, the IDE might handle token refresh internally or prompt you for re-authorization depending on the configuration and token expiry.
Communication with GitHub:

IntelliJ constructs a secure HTTPS request to the relevant GitHub API endpoint (e.g., for cloning a repository, it would use the GET /repos/{owner}/{repo} endpoint).
Authentication Details: The request includes the necessary authentication information:
PAT-Based: Username and PAT are included in the authorization header.
OAuth-Based: An access token obtained through OAuth is used for authentication.
Data Transfer:

Outgoing Requests: When pushing or cloning repositories, the IDE transfers data (code, commits, etc.) to or from GitHub servers.
Incoming Responses: GitHub responds with the requested data (e.g., repository content for cloning or status information for pushes).
IntelliJ Processes Response:

The IDE interprets the response from GitHub and displays relevant information in the terminal or updates the project view.
In case of errors, the terminal displays error messages from GitHub.
Additional Considerations:

SSH Keys (Optional): If you've set up SSH key authentication for GitHub, the communication might happen directly over SSH instead of HTTPS, eliminating the need to include credentials in each request.
IDE Configuration: IntelliJ settings for Git and specific services like GitHub can influence how authentication and communication occur.
Security: Secure protocols (HTTPS, SSH) are used to encrypt communication between the IDE and GitHub.
In essence:

The IntelliJ terminal acts as a user interface for Git commands, while the Git integration in IntelliJ handles the communication with GitHub services securely using your chosen authentication method (PAT or OAuth).







-----------------------------------BACKUP vs REPLICATION -------------------------------------------------------
Backup:

Purpose: Creates a copy of data at a specific point in time.
Focus: Primarily used for disaster recovery and restoring data in case of accidental deletion, corruption, or system failure.

Replication:

Purpose: Creates a continuous or near-continuous copy of data on another system.
Focus: Primarily used for high availability and minimizing downtime in case of a primary system outage.

The choice between backup and replication depends on your specific needs:

For disaster recovery and occasional data restores: Backups are a good choice.
For high availability and minimizing downtime: Replication is the preferred approach.
For a balanced approach: A combination of backups and replication can be used for comprehensive data protection.



---------------------------------------------LDAP & SSO ----------------------------------------------------------------


LDAP and SSO are both related to user authentication and authorization, but they serve different purposes:

LDAP (Lightweight Directory Access Protocol):
=============================================
Function: LDAP is an open-standard protocol for accessing and managing directory services. It acts like a phonebook for your network, storing information about users, groups, devices, and other resources.
Focus: LDAP provides a centralized repository for user identities and attributes, allowing applications and services to verify user credentials and access rights.
Benefits:
Centralized management: Reduces redundancy and simplifies user administration across multiple systems.
Scalability: Can handle large numbers of users and resources efficiently.
Interoperability: Works with various applications and services that support LDAP.

SSO (Single Sign-On):
====================
Function: SSO is a security system that allows users to log in once and access multiple applications or systems using the same credentials.
Focus: SSO enhances user convenience by eliminating the need to enter credentials repeatedly. It also improves security by reducing the risk of password fatigue and stolen credentials.
Benefits:
Improved user experience: Users only need to remember one set of credentials.
Enhanced security: Reduces password-related vulnerabilities.
Streamlined administration: Easier to manage user access across multiple systems.
Relationship Between LDAP and SSO:

LDAP can be used as a foundation for SSO. An SSO system can leverage LDAP to authenticate users against the centralized directory service.
While LDAP provides user identity information, SSO handles the authentication flow and grants access to various applications.
Here's an analogy:
------------------
Think of LDAP as a library catalog. It stores information about books (users) and their categories (groups).
SSO is like a library card. You use one card (credentials) to access different books (applications) in the library (network) based on your library card category (access rights).
In summary:
-----------
LDAP is a protocol for managing user identities in a central location.
SSO is a system that allows users to access multiple applications with a single login.
LDAP can be used as a component of an SSO solution.





----------------------------- BLUE/GREEN DEPLOYMENT --------------------------------------------
Blue/green deployment is a strategy for deploying new versions of applications with minimal downtime and risk. It involves maintaining two identical production environments, figuratively named "blue" and "green." Here's how it works:

Existing Environment (Blue): This environment runs the currently live version of your application, handling all traffic from users.

New Environment (Green):  This environment is a complete replica of the blue environment, but with the new version of your application deployed.

Deployment Process:

The new application version is deployed to the green environment.
The green environment undergoes thorough testing to ensure everything functions as expected.
Once testing is complete, traffic is gradually switched from the blue environment to the green environment. This can be done through various methods like DNS record updates or load balancers.
If the green environment performs well, the blue environment can be decommissioned or repurposed for future deployments. In case of any issues, switching traffic back to the blue environment (rollback) is straightforward.